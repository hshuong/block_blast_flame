import 'package:flame/game.dart';
import 'package:flame/components.dart';
import 'package:flutter/material.dart';
import '../models/game_board.dart';
import 'components/board_component.dart';
import 'components/draggable_block_component.dart';
import 'game_state_manager.dart';

class BlockBlastGame extends FlameGame {
  final GameStateManager gameState;
  BoardComponent? boardComponent;
  
  final List<DraggableBlockComponent?> blockComponents = [null, null, null];
  
  // Responsive sizing variables
  double cellSize = 42;
  double cellMargin = 2;
  double blockCellSize = 28;
  double boardY = 0;
  double blockY = 0;
  double titleFontSize = 32;
  double scoreFontSize = 24;
  double instructionFontSize = 14;

  BlockBlastGame({required this.gameState});

  @override
  Color backgroundColor() => const Color(0xFF0F2027);

  @override
  Future<void> onLoad() async {
    await super.onLoad();
    
    _calculateResponsiveSizes();
    
    // T·∫°o board component v·ªõi k√≠ch th∆∞·ªõc responsive
    boardComponent = BoardComponent(
      board: gameState.board,
      cellSize: cellSize,
      cellMargin: cellMargin,
    );
    boardComponent!.position = Vector2(size.x / 2, boardY);
    await add(boardComponent!);
    
    // T·∫°o blocks
    _regenerateBlocks();
    
    // Listen to state changes
    gameState.addListener(_onGameStateChanged);
  }

  void _calculateResponsiveSizes() {
    // T√≠nh to√°n d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh nh·ªè h∆°n
    final minDimension = size.x < size.y ? size.x : size.y;
    
    // Board chi·∫øm kho·∫£ng 85% chi·ªÅu r·ªông m√†n h√¨nh
    final boardWidth = size.x * 0.85;
    cellSize = (boardWidth - 10) / 8.5; // 8 cells + margins
    cellMargin = cellSize * 0.05;
    
    // Block size nh·ªè h∆°n cell size m·ªôt ch√∫t
    blockCellSize = cellSize * 0.65;
    
    // V·ªã tr√≠ responsive - Di chuy·ªÉn board xu·ªëng ƒë·ªÉ tr√°nh che ch·ªØ
    boardY = size.y * 0.45; // TƒÉng t·ª´ 0.40 l√™n 0.45
    blockY = size.y * 0.85; // TƒÉng t·ª´ 0.80 l√™n 0.85
    
    // Font sizes responsive
    titleFontSize = minDimension * 0.08;
    scoreFontSize = minDimension * 0.06;
    instructionFontSize = minDimension * 0.035;
    
    debugPrint('üìê Responsive sizes - cellSize: $cellSize, blockCellSize: $blockCellSize');
  }

  @override
  void onGameResize(Vector2 size) {
    super.onGameResize(size);
    
    // T√≠nh to√°n l·∫°i k√≠ch th∆∞·ªõc khi m√†n h√¨nh thay ƒë·ªïi
    _calculateResponsiveSizes();
    
    // C·∫≠p nh·∫≠t board n·∫øu ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    if (boardComponent != null) {
      boardComponent!.updateCellSize(cellSize, cellMargin);
      boardComponent!.position = Vector2(size.x / 2, boardY);
      
      // C·∫≠p nh·∫≠t v·ªã tr√≠ blocks
      _updateBlockPositions();
    }
  }

  void _onGameStateChanged() {
    // Remove old board component v√† t·∫°o m·ªõi
    if (boardComponent != null) {
      boardComponent!.removeFromParent();
    }
    
    boardComponent = BoardComponent(
      board: gameState.board,
      cellSize: cellSize,
      cellMargin: cellMargin,
    );
    boardComponent!.position = Vector2(size.x / 2, boardY);
    add(boardComponent!);
    
    // Regenerate blocks if needed
    _regenerateBlocks();
  }

  void _regenerateBlocks() {
    // Clear old components
    for (var comp in blockComponents) {
      comp?.removeFromParent();
    }
    
    // ƒê·∫øm s·ªë block th·ª±c t·∫ø
    List<int> activeBlockIndices = [];
    for (int i = 0; i < 3; i++) {
      if (gameState.currentBlocks[i] != null) {
        activeBlockIndices.add(i);
      }
    }
    
    if (activeBlockIndices.isEmpty) return;
    
    // T√≠nh to√°n kho·∫£ng c√°ch ƒë·ªÉ cƒÉn gi·ªØa
    final blockSpacing = size.x * 0.25; // Kho·∫£ng c√°ch gi·ªØa c√°c block
    final totalWidth = blockSpacing * (activeBlockIndices.length - 1);
    final startX = (size.x - totalWidth) / 2;
    
    // T·∫°o components m·ªõi v·ªõi v·ªã tr√≠ cƒÉn gi·ªØa
    int positionIndex = 0;
    for (int i = 0; i < 3; i++) {
      if (gameState.currentBlocks[i] != null) {
        final xPos = startX + (blockSpacing * positionIndex);
        
        final blockComp = DraggableBlockComponent(
          block: gameState.currentBlocks[i]!,
          blockIndex: i,
          cellSize: blockCellSize,
          position: Vector2(xPos, blockY),
          onBlockDragStart: _handleBlockDragStart,
          onBlockDragUpdate: _handleBlockDragUpdate,
          onBlockDragEnd: _handleBlockDragEnd,
        );
        blockComponents[i] = blockComp;
        add(blockComp);
        positionIndex++;
      } else {
        blockComponents[i] = null;
      }
    }
  }

  void _updateBlockPositions() {
    // ƒê·∫øm s·ªë block th·ª±c t·∫ø
    List<int> activeBlockIndices = [];
    for (int i = 0; i < 3; i++) {
      if (blockComponents[i] != null) {
        activeBlockIndices.add(i);
      }
    }
    
    if (activeBlockIndices.isEmpty) return;
    
    // T√≠nh to√°n kho·∫£ng c√°ch ƒë·ªÉ cƒÉn gi·ªØa
    final blockSpacing = size.x * 0.25;
    final totalWidth = blockSpacing * (activeBlockIndices.length - 1);
    final startX = (size.x - totalWidth) / 2;
    
    // C·∫≠p nh·∫≠t v·ªã tr√≠
    int positionIndex = 0;
    for (int i = 0; i < 3; i++) {
      if (blockComponents[i] != null) {
        final xPos = startX + (blockSpacing * positionIndex);
        blockComponents[i]!.position = Vector2(xPos, blockY);
        positionIndex++;
      }
    }
  }

  void _handleBlockDragStart(int blockIndex, Vector2 startPos) {
    debugPrint('üéÆ Start dragging block $blockIndex');
    boardComponent?.updatePreview(null, null, null);
  }

  void _handleBlockDragUpdate(int blockIndex, Vector2 currentPos) {
    if (gameState.currentBlocks[blockIndex] == null || boardComponent == null) return;
    
    final blockComp = blockComponents[blockIndex];
    if (blockComp == null) return;
    
    final boardLocalPos = currentPos - boardComponent!.position + 
                          Vector2(boardComponent!.size.x / 2, boardComponent!.size.y / 2);
    
    final gridPos = _localToGrid(boardLocalPos);
    
    if (gridPos != null) {
      final block = gameState.currentBlocks[blockIndex]!;
      final row = gridPos.y.toInt();
      final col = gridPos.x.toInt();
      
      final centerRow = row - (block.height ~/ 2);
      final centerCol = col - (block.width ~/ 2);
      
      if (gameState.canPlaceBlock(block, centerRow, centerCol)) {
        boardComponent!.updatePreview(block, centerRow, centerCol);
      } else {
        boardComponent!.updatePreview(null, null, null);
      }
    } else {
      boardComponent!.updatePreview(null, null, null);
    }
  }

  void _handleBlockDragEnd(int blockIndex, Vector2 endPos) {
    debugPrint('üéÆ End dragging block $blockIndex');
    
    if (gameState.currentBlocks[blockIndex] == null || boardComponent == null) return;
    
    final boardLocalPos = endPos - boardComponent!.position + 
                          Vector2(boardComponent!.size.x / 2, boardComponent!.size.y / 2);
    
    final gridPos = _localToGrid(boardLocalPos);
    bool placed = false;
    
    if (gridPos != null) {
      final block = gameState.currentBlocks[blockIndex]!;
      final row = gridPos.y.toInt();
      final col = gridPos.x.toInt();
      
      final centerRow = row - (block.height ~/ 2);
      final centerCol = col - (block.width ~/ 2);
      
      placed = gameState.placeBlock(blockIndex, block, centerRow, centerCol);
      
      if (placed) {
        debugPrint('‚úÖ Block placed! Score: ${gameState.score}');
      }
    }
    
    if (!placed) {
      blockComponents[blockIndex]?.returnToOriginalPosition();
      debugPrint('‚ùå Cannot place block here');
    }
    
    boardComponent?.updatePreview(null, null, null);
  }

  Vector2? _localToGrid(Vector2 localPos) {
    final col = ((localPos.x - cellMargin) / (cellSize + cellMargin)).floor();
    final row = ((localPos.y - cellMargin) / (cellSize + cellMargin)).floor();
    
    if (col >= 0 && col < GameBoard.size && row >= 0 && row < GameBoard.size) {
      return Vector2(col.toDouble(), row.toDouble());
    }
    return null;
  }

  @override
  void onRemove() {
    gameState.removeListener(_onGameStateChanged);
    super.onRemove();
  }

  @override
  void render(Canvas canvas) {
    super.render(canvas);
    
    // V·∫Ω title ·ªü v·ªã tr√≠ cao h∆°n
    final textPaint = TextPaint(
      style: TextStyle(
        color: Colors.white,
        fontSize: titleFontSize,
        fontWeight: FontWeight.bold,
      ),
    );
    textPaint.render(
      canvas,
      'BLOCK BLAST',
      Vector2(size.x / 2, size.y * 0.05), // Gi·∫£m t·ª´ 0.08 xu·ªëng 0.05
      anchor: Anchor.center,
    );
    
    // Kh√¥ng v·∫Ω score ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ c√≥ trong game_screen.dart
    
    // V·∫Ω instruction
    final instructionPaint = TextPaint(
      style: TextStyle(
        color: Colors.white.withOpacity(0.6),
        fontSize: instructionFontSize,
      ),
    );
    instructionPaint.render(
      canvas,
      'üëÜ Drag blocks to the board',
      Vector2(size.x / 2, size.y * 0.72), // ƒêi·ªÅu ch·ªânh v·ªã tr√≠
      anchor: Anchor.center,
    );
  }
}